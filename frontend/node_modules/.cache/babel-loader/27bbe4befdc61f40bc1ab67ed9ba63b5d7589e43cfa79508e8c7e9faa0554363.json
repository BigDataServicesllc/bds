{"ast":null,"code":"var _jsxFileName = \"/Users/michaelortiz/Documents/BDS/bds/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js (NUEVA VERSIÓN)\nimport React from 'react';\nimport { Outlet, useLocation } from 'react-router-dom'; // Importamos herramientas del router\nimport LayoutHeader from './components/LayoutHeader';\nimport LayoutFooter from './components/LayoutFooter';\nimport CallToActionSection from './components/CallToActionSection';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Por ahora, la lógica de idioma y navegación se quedará aquí,\n  // pero en el futuro se podría mover a un 'Context' para una solución más avanzada.\n  const [language, setLanguage] = React.useState('es');\n\n  // NOTA: La lógica de 'currentPage' y 'handleNavigate' ya no es necesaria aquí,\n  // porque ahora la navegación es entre páginas, no con scroll.\n  // La eliminaremos en el siguiente paso al actualizar el Header.\n\n  const handleToggleLanguage = () => {\n    setLanguage(prevLang => prevLang === 'es' ? 'en' : 'es');\n  };\n  const location = useLocation(); // Hook para saber en qué página estamos\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-900 text-gray-100 font-sans antialiased min-h-screen flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(LayoutHeader, {\n      onToggleLanguage: handleToggleLanguage,\n      language: language\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-grow\",\n      children: /*#__PURE__*/_jsxDEV(Outlet, {\n        context: {\n          language\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), location.pathname !== '/servicios' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CallToActionSection, {\n        language: language\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(LayoutFooter, {\n        language: language\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gXKVX9nactfhHgOPpa8b4WULVLs=\", false, function () {\n  return [useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Outlet","useLocation","LayoutHeader","LayoutFooter","CallToActionSection","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","language","setLanguage","useState","handleToggleLanguage","prevLang","location","className","children","onToggleLanguage","fileName","_jsxFileName","lineNumber","columnNumber","context","pathname","_c","$RefreshReg$"],"sources":["/Users/michaelortiz/Documents/BDS/bds/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js (NUEVA VERSIÓN)\nimport React from 'react';\nimport { Outlet, useLocation } from 'react-router-dom'; // Importamos herramientas del router\nimport LayoutHeader from './components/LayoutHeader';\nimport LayoutFooter from './components/LayoutFooter';\nimport CallToActionSection from './components/CallToActionSection';\n\nfunction App() {\n  // Por ahora, la lógica de idioma y navegación se quedará aquí,\n  // pero en el futuro se podría mover a un 'Context' para una solución más avanzada.\n  const [language, setLanguage] = React.useState('es');\n  \n  // NOTA: La lógica de 'currentPage' y 'handleNavigate' ya no es necesaria aquí,\n  // porque ahora la navegación es entre páginas, no con scroll.\n  // La eliminaremos en el siguiente paso al actualizar el Header.\n\n  const handleToggleLanguage = () => {\n    setLanguage((prevLang) => (prevLang === 'es' ? 'en' : 'es'));\n  };\n  \n  const location = useLocation(); // Hook para saber en qué página estamos\n\n  return (\n    <div className=\"bg-gray-900 text-gray-100 font-sans antialiased min-h-screen flex flex-col\">\n      <LayoutHeader\n        onToggleLanguage={handleToggleLanguage}\n        language={language}\n      />\n      \n      <main className=\"flex-grow\">\n        {/* Outlet es el \"espacio reservado\" donde React Router renderizará la página correcta (HomePage o ServiceDetailPage) */}\n        <Outlet context={{ language }} /> \n      </main>\n\n      {/* Mostramos el CTA y el Footer solo si no estamos en la página de servicios */}\n      {location.pathname !== '/servicios' && (\n          <>\n              <CallToActionSection language={language} />\n              <LayoutFooter language={language} />\n          </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AACxD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,mBAAmB,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,KAAK,CAACc,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA;EACA;;EAEA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjCF,WAAW,CAAEG,QAAQ,IAAMA,QAAQ,KAAK,IAAI,GAAG,IAAI,GAAG,IAAK,CAAC;EAC9D,CAAC;EAED,MAAMC,QAAQ,GAAGf,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC,oBACEK,OAAA;IAAKW,SAAS,EAAC,4EAA4E;IAAAC,QAAA,gBACzFZ,OAAA,CAACJ,YAAY;MACXiB,gBAAgB,EAAEL,oBAAqB;MACvCH,QAAQ,EAAEA;IAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eAEFjB,OAAA;MAAMW,SAAS,EAAC,WAAW;MAAAC,QAAA,eAEzBZ,OAAA,CAACN,MAAM;QAACwB,OAAO,EAAE;UAAEb;QAAS;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B,CAAC,EAGNP,QAAQ,CAACS,QAAQ,KAAK,YAAY,iBAC/BnB,OAAA,CAAAE,SAAA;MAAAU,QAAA,gBACIZ,OAAA,CAACF,mBAAmB;QAACO,QAAQ,EAAEA;MAAS;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3CjB,OAAA,CAACH,YAAY;QAACQ,QAAQ,EAAEA;MAAS;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACtC,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACb,EAAA,CApCQD,GAAG;EAAA,QAaOR,WAAW;AAAA;AAAAyB,EAAA,GAbrBjB,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}